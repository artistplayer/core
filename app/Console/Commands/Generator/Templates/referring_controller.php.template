<?php

namespace App\Http\Controllers;

use App\{{reference}};
use App\Http\Resources\{{referring}}Resource;
use App\{{model}};
use Illuminate\Http\Request;

class {{referring}}Controller extends Controller
{

    /**
     * @param Request $request
     * @param $referenceId
     * @return \Illuminate\Http\Resources\Json\AnonymousResourceCollection
     * @throws \Illuminate\Auth\Access\AuthorizationException
     */
    public function index(Request $request, $referenceId)
    {
        $this->authorize('index', {{model}}::class);

        $order = $request->query->get('order', 'asc');
        $sort = strtolower($request->query->get('sort', 'id'));
        $limit = $request->query->get('limit', 100) ?: 100;
        if($limit > 100){
            $limit = 100;
        }

        $reference = {{reference}}::findOrFail($referenceId);
        $collection = $reference->{{collection}}()->orderBy($sort, $order)->paginate($limit)->appends($request->query->all());

        return {{referring}}Resource::collection($collection);
    }

    /**
     * @param Request $request
     * @param $referenceId
     * @return \Illuminate\Http\Resources\Json\AnonymousResourceCollection
     * @throws \Illuminate\Auth\Access\AuthorizationException
     * @throws \Illuminate\Validation\ValidationException
     */
    public function store(Request $request, $referenceId)
    {
        $this->authorize('store', Playlist::class);

        $data = $this->validate($request, {{insertValidation}});
        $data = $this->getData($request, $data, $referenceId);

        $reference = {{reference}}::findOrFail($referenceId);
        $reference->{{collection}}()->attach($request->get('{{collection}}'), $data);

        $attached = $reference->{{collection}}()->whereIn('{{pivot}}', $request->get('{{collection}}'))->get();

        {{insertPivot}}

        return {{referring}}Resource::collection($attached);
    }

    /**
     * @param $referenceId
     * @param $modelId
     * @return {{referring}}Resource
     * @throws \Illuminate\Auth\Access\AuthorizationException
     */
    public function show($referenceId, $modelId)
    {
        $reference = {{reference}}::findOrFail($referenceId);
        $model = $reference->{{collection}}()->findOrFail($modelId);
        $this->authorize('show', $model);


        return new {{referring}}Resource($model);
    }

    /**
     * @param Request $request
     * @param $referenceId
     * @param $modelId
     * @return {{referring}}Resource
     * @throws \Illuminate\Auth\Access\AuthorizationException
     * @throws \Illuminate\Validation\ValidationException
     */
    public function update(Request $request, $referenceId, $modelId)
    {
        $reference = {{reference}}::findOrFail($referenceId);
        $model = $reference->{{collection}}()->findOrFail($modelId);

        $this->authorize('update', $model);

        $data = $this->validate($request, {{updateValidation}});
        $data = $this->getData($request, $data, $referenceId, $modelId);


        $reference->{{collection}}()->updateExistingPivot($modelId, $data);
        $model = $reference->{{collection}}()->findOrFail($modelId);

        {{updatePivot}}

        return new {{referring}}Resource($model);
    }

    /**
     * @param $referenceId
     * @param $modelId
     * @return \Illuminate\Http\JsonResponse
     * @throws \Illuminate\Auth\Access\AuthorizationException
     */
    public function destroy($referenceId, $modelId)
    {
        $reference = {{reference}}::findOrFail($referenceId);
        $model = $reference->{{collection}}()->findOrFail($modelId);

        $this->authorize('delete', $model);

        $reference->{{collection}}()->detach($modelId);

        {{deletePivot}}

        return response()->json([], 204);
    }


    /**
     * @param Request $request
     * @param $referenceId
     * @return \Illuminate\Http\JsonResponse
     */
    public function patch(Request $request, $referenceId)
    {
        var_dump($referenceId);
        var_dump($request->request->all());
        return response()->json([], 204);
    }

    /**
     * @param Request $request
     * @param array $data
     * @param integer $referenceId
     * @param integer|null $modelId
     * @return array
     */
    private function getData(Request $request, array $data, $referenceId, $modelId = null)
    {
        {{processPivot}}

        {{cleanData}}

        return $data;
    }
}
